
{
  "categories": [
    {
      "id": 1,
      "name": "Salon",
      "equipments": [
        {
          "equipmentsId": [1,2,5,3,4],
          "newEquipementName": "lolo"
        },
       
      ]
      "photos": [File,Fille,File]
    },
    {
      "id": 2,
      "name": "Chambre",
     "equipments": [
        {
          "equipmentsId": [1,2,5,3,4],
          "newEquipementName": "table"
        },
       
      ]
      "photos": [File,Fille,File]
    }
  ],
  "pieces": 
    {
      "id": 1,
      "name": "Living Room",
      "nomnbre": 2
      "photos": [File,Fille,File]
    },
    {
      "id": 2,
      "name": "Bedroom",
      "quantity": 1
      "photos": [File,Fille,File]
    }
  
}


 public function uploadFiles(Request $request, $randomString,$location){
        foreach($request->file('files') as $photo){
            $errorUploadFiles = $this->validateFile($photo);
            $this->storeFile($photo, $randomString, $location);

            if($errorUploadFiles){
                return $errorUploadFiles;
            }

            // return 1;
        }
    }



     private function returnFavoritesList($user_id, $message) {
        $page = 1;
        $perPage = 6;
    
        $db = DB::connection()->getPdo();
    
        $query = "
        SELECT 
            favorites.*, 
            ads.id AS ad_id, 
            ads.category_id AS ad_category_id, 
            ads.owner_id AS ad_owner_id, 
            ads.location_id AS ad_location_id, 
            (
                SELECT location 
                FROM files 
                WHERE ads.file_code = files.referencecode 
                LIMIT 1
            ) AS image,
            ads.title AS title, 
            ads.file_code AS ad_file_code, 
            ads.final_price AS price, 
            ads.uid AS ad_uid,
            categories.title AS category_title
        FROM 
            favorites 
        JOIN 
            ads ON favorites.ad_id = ads.id 
        LEFT JOIN 
            categories ON ads.category_id = categories.id
        WHERE 
            favorites.user_id = :user_id 
            AND ads.deleted = false 
        ORDER BY 
            ads.id DESC 
        LIMIT :limit OFFSET :offset
    ";
    
        $offset = $perPage * ($page - 1);
    
        $data = DB::select($query, ['user_id' => $user_id, 'limit' => $perPage, 'offset' => $offset]);
    
        $totalQuery = "
            SELECT 
                COUNT(*) AS total 
            FROM 
                favorites
            WHERE 
                favorites.user_id = :user_id
        ";
    
        $total = DB::select($totalQuery, ['user_id' => $user_id])[0]->total;
    
        $paginator = new \Illuminate\Pagination\LengthAwarePaginator($data, $total, $perPage, $page, [
            'path' => request()->url(),
            'query' => request()->query(),
        ]);
    
        return response()->json(['message' => $message, 'data' => $paginator], 200);