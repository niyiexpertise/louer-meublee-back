
{
  "categories": [
    {
      "id": 1,
      "name": "Salon",
      "equipments": [
        {
          "equipmentsId": [1,2,5,3,4],
          "newEquipementName": "lolo"
        },
       
      ]
      "photos": [File,Fille,File]
    },
    {
      "id": 2,
      "name": "Chambre",
     "equipments": [
        {
          "equipmentsId": [1,2,5,3,4],
          "newEquipementName": "table"
        },
       
      ]
      "photos": [File,Fille,File]
    }
  ],
  "pieces": 
    {
      "id": 1,
      "name": "Living Room",
      "nomnbre": 2
      "photos": [File,Fille,File]
    },
    {
      "id": 2,
      "name": "Bedroom",
      "quantity": 1
      "photos": [File,Fille,File]
    }
  
}


 public function uploadFiles(Request $request, $randomString,$location){
        foreach($request->file('files') as $photo){
            $errorUploadFiles = $this->validateFile($photo);
            $this->storeFile($photo, $randomString, $location);

            if($errorUploadFiles){
                return $errorUploadFiles;
            }

            // return 1;
        }
    }



     private function returnFavoritesList($user_id, $message) {
        $page = 1;
        $perPage = 6;
    
        $db = DB::connection()->getPdo();
    
        $query = "
        SELECT 
            favorites.*, 
            ads.id AS ad_id, 
            ads.category_id AS ad_category_id, 
            ads.owner_id AS ad_owner_id, 
            ads.location_id AS ad_location_id, 
            (
                SELECT location 
                FROM files 
                WHERE ads.file_code = files.referencecode 
                LIMIT 1
            ) AS image,
            ads.title AS title, 
            ads.file_code AS ad_file_code, 
            ads.final_price AS price, 
            ads.uid AS ad_uid,
            categories.title AS category_title
        FROM 
            favorites 
        JOIN 
            ads ON favorites.ad_id = ads.id 
        LEFT JOIN 
            categories ON ads.category_id = categories.id
        WHERE 
            favorites.user_id = :user_id 
            AND ads.deleted = false 
        ORDER BY 
            ads.id DESC 
        LIMIT :limit OFFSET :offset
    ";
    
        $offset = $perPage * ($page - 1);
    
        $data = DB::select($query, ['user_id' => $user_id, 'limit' => $perPage, 'offset' => $offset]);
    
        $totalQuery = "
            SELECT 
                COUNT(*) AS total 
            FROM 
                favorites
            WHERE 
                favorites.user_id = :user_id
        ";
    
        $total = DB::select($totalQuery, ['user_id' => $user_id])[0]->total;
    
        $paginator = new \Illuminate\Pagination\LengthAwarePaginator($data, $total, $perPage, $page, [
            'path' => request()->url(),
            'query' => request()->query(),
        ]);
    
        return response()->json(['message' => $message, 'data' => $paginator], 200);



        _____________________________



        <?php

return [
    'enabled' => env('AUDITING_ENABLED', true),

    'implementation' => OwenIt\Auditing\Models\Audit::class,

    'user' => [
        'morph_prefix' => 'user',
        'guards' => [
            'web',
            'api',
        ],
        'resolver' => App\Resolvers\CustomUserResolver::class,
    ],

    'resolvers' => [
        'ip_address' => OwenIt\Auditing\Resolvers\IpAddressResolver::class,
        'user_agent' => OwenIt\Auditing\Resolvers\UserAgentResolver::class,
        'url' => OwenIt\Auditing\Resolvers\UrlResolver::class,
    ],

    'events' => [
        'created',
        'updated',
        'deleted',
        'restored',
    ],

    'strict' => false,

    'exclude' => [],

    'empty_values' => true,
    'allowed_empty_values' => [
        'retrieved',
    ],

    'allowed_array_values' => false,

    'timestamps' => false,

    'threshold' => 0,

    'driver' => 'database',

    'drivers' => [
        'database' => [
            'table' => 'audits',
            'connection' => null,
        ],
    ],

    'queue' => [
        'enable' => false,
        'connection' => 'sync',
        'queue' => 'default',
        'delay' => 0,
    ],

    'console' => false,
];


public function sendResetLink(Request $request)
{
    $request->validate(['email' => 'required|email']);

    $user = User::where('email', $request->email)->first();

    if (!$user) {
        return response()->json(['message' => 'Email not found.'], 404);
    }

    $token = Str::random(60);

    DB::table('password_resets')->insert([
        'email' => $request->email,
        'token' => $token,
        'created_at' => now(),
    ]);

    $resetLink = url('/reset-password?token=' . $token . '&email=' . urlencode($request->email));

    // Envoie l'email avec le lien de réinitialisation
    Mail::send('emails.reset', ['resetLink' => $resetLink], function ($message) use ($request) {
        $message->to($request->email);
        $message->subject('Reset Password Notification');
    });

    return response()->json(['message' => 'Reset password link sent to your email.']);
}


public function resetPassword(Request $request)
{
    $request->validate([
        'email' => 'required|email',
        'password' => 'required|string|confirmed|min:8',
        'token' => 'required|string',
    ]);

    $passwordReset = DB::table('password_resets')->where('email', $request->email)->where('token', $request->token)->first();

    if (!$passwordReset) {
        return response()->json(['message' => 'Invalid token or email.'], 404);
    }

    // Vérifie si le token a expiré (durée d'expiration définie dans config/auth.php)
    $expirationTime = config('auth.passwords.users.expire');
    if (Carbon\Carbon::parse($passwordReset->created_at)->addMinutes($expirationTime)->isPast()) {
        return response()->json(['message' => 'The password reset link has expired.'], 403);
    }

    // Met à jour le mot de passe de l'utilisateur
    $user = User::where('email', $request->email)->first();
    if (!$user) {
        return response()->json(['message' => 'User not found.'], 404);
    }

    $user->password = bcrypt($request->password);
    $user->save();

    // Supprime l'entrée du token de réinitialisation de mot de passe
    DB::table('password_resets')->where('email', $request->email)->delete();

    return response()->json(['message' => 'Password has been successfully reset.']);
}
